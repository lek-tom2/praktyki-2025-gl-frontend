FROM node:18-alpine AS build

# Set the working directory inside the container for this stage
WORKDIR /app

# Copy package.json and package-lock.json to leverage Docker layer caching
# This ensures that 'npm install' is only re-run if dependencies change
COPY package*.json ./

# Install project dependencies
# The --silent flag reduces the amount of output
# The '&&' combines the two commands into one layer for better caching
RUN npm install

# Copy the rest of the application source code
COPY . .

# Build the React application for production
# This command generates the optimized static files in the 'build' directory
RUN npm run build

# STAGE 2: Serve the application with a lightweight web server
# This stage uses a minimal web server image to serve the static files
# We use Nginx, a very popular and efficient web server
FROM nginx:stable-alpine

# Copy the production build from the previous stage
# The '--from=build' flag specifies that we are copying from the 'build' stage
# This step is key to keeping the final image small, as it only copies the
# final build artifacts and leaves all development dependencies behind
COPY --from=build /app/build /usr/share/nginx/html

# Expose port 80 to the host machine for web traffic
EXPOSE 80